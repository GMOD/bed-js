// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`autoSql parser > clinvar CNV table 1`] = `
{
  "comment": "Browser extensible data (12 fields) plus information about a ClinVar entry",
  "fields": [
    {
      "comment": "Chromosome (or contig, scaffold, etc.)",
      "name": "chrom",
      "type": "string",
    },
    {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    {
      "comment": "Name of item",
      "name": "name",
      "type": "string",
    },
    {
      "comment": "Score from 0-1000",
      "name": "score",
      "type": "uint",
    },
    {
      "comment": "+ or -",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    {
      "comment": "Start of where display should be thick (start codon)",
      "name": "thickStart",
      "type": "uint",
    },
    {
      "comment": "End of where display should be thick (stop codon)",
      "name": "thickEnd",
      "type": "uint",
    },
    {
      "comment": "Used as itemRgb as of 2004-11-22",
      "name": "reserved",
      "type": "uint",
    },
    {
      "comment": "Number of blocks",
      "name": "blockCount",
      "type": "int",
    },
    {
      "comment": "Comma separated list of block sizes",
      "name": "blockSizes",
      "size": "blockCount",
      "type": "int",
    },
    {
      "comment": "Start positions relative to chromStart",
      "name": "chromStarts",
      "size": "blockCount",
      "type": "int",
    },
    {
      "comment": "ClinVar Variation Report",
      "name": "origName",
      "type": "lstring",
    },
    {
      "comment": "Clinical significance",
      "name": "clinSign",
      "type": "string",
    },
    {
      "comment": "Review Status",
      "name": "reviewStatus",
      "type": "string",
    },
    {
      "comment": "Type of Variant",
      "name": "type",
      "type": "string",
    },
    {
      "comment": "Gene Symbol",
      "name": "geneId",
      "type": "string",
    },
    {
      "comment": "dbSNP ID",
      "name": "snpId",
      "type": "string",
    },
    {
      "comment": "dbVar ID",
      "name": "nsvId",
      "type": "string",
    },
    {
      "comment": "ClinVar Allele Submission",
      "name": "rcvAcc",
      "type": "lstring",
    },
    {
      "comment": "Genetic Testing Registry",
      "name": "testedInGtr",
      "type": "string",
    },
    {
      "comment": "Phenotypes",
      "name": "phenotypeList",
      "type": "lstring",
    },
    {
      "comment": "Phenotype identifiers",
      "name": "phenotype",
      "type": "lstring",
    },
    {
      "comment": "Data origin",
      "name": "origin",
      "type": "string",
    },
    {
      "comment": "Genome assembly",
      "name": "assembly",
      "type": "string",
    },
    {
      "comment": "Cytogenetic status",
      "name": "cytogenetic",
      "type": "string",
    },
    {
      "comment": "Nucleotide HGVS",
      "name": "hgvsCod",
      "type": "lstring",
    },
    {
      "comment": "Protein HGVS",
      "name": "hgvsProt",
      "type": "lstring",
    },
    {
      "comment": "Number of submitters",
      "name": "numSubmit",
      "type": "string",
    },
    {
      "comment": "Last evaluation",
      "name": "lastEval",
      "type": "string",
    },
    {
      "comment": "Guidelines",
      "name": "guidelines",
      "type": "string",
    },
    {
      "comment": "Other identifiers e.g. OMIM IDs, etc.",
      "name": "otherIds",
      "type": "lstring",
    },
    {
      "comment": "Mouse over text, not shown",
      "name": "_mouseOver",
      "type": "string",
    },
  ],
  "name": "clinVarBed",
  "type": "table",
}
`;

exports[`autoSql parser > comment 1`] = `
{
  "comment": "Clinvar Submissions",
  "fields": [
    {
      "comment": "Chromosome (or contig, scaffold, etc.)",
      "name": "chrom",
      "type": "string",
    },
    {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    {
      "comment": "Name of item",
      "name": "name",
      "type": "string",
    },
    {
      "comment": "Score from 0-1000",
      "name": "score",
      "type": "uint",
    },
    {
      "comment": "+ or -",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    {
      "comment": "Start of where display should be thick (start codon)",
      "name": "thickStart",
      "type": "uint",
    },
    {
      "comment": "End of where display should be thick (stop codon)",
      "name": "thickEnd",
      "type": "uint",
    },
    {
      "comment": "Used as itemRgb as of 2004-11-22",
      "name": "reserved",
      "type": "uint",
    },
    [
      [],
      "#",
      "extra fields",
      [
        "
",
        " ",
        " ",
        " ",
        " ",
      ],
    ],
    {
      "comment": "Size of lollipop",
      "name": "lollySize",
      "type": "uint",
    },
    {
      "comment": "changes",
      "name": "changes",
      "type": "lstring",
    },
    {
      "comment": "variantIds",
      "name": "variantIds",
      "type": "lstring",
    },
    {
      "comment": "subIds",
      "name": "subIds",
      "type": "lstring",
    },
    {
      "comment": "mouseOver",
      "name": "_mouseOver",
      "type": "lstring",
    },
  ],
  "name": "clinsub",
  "type": "table",
}
`;

exports[`autoSql parser > pli 1`] = `
{
  "comment": "bed12+5 for displaying gnomAD haploinsufficiency prediction scores",
  "fields": [
    {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    {
      "comment": "ENST or ENSG Name",
      "name": "name",
      "type": "string",
    },
    {
      "comment": "pLI score between 0-1000, or  -1 for NA",
      "name": "score",
      "type": "uint",
    },
    {
      "comment": "strand of transcript",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    {
      "comment": "Start of where display is thick",
      "name": "thickStart",
      "type": "uint",
    },
    {
      "comment": "End of where display should be thick",
      "name": "thickEnd",
      "type": "uint",
    },
    {
      "comment": "Color of item",
      "name": "itemRgb",
      "type": "uint",
    },
    {
      "comment": "Number of exons",
      "name": "blockCount",
      "type": "int",
    },
    {
      "comment": "Size of each exon",
      "name": "blockSizes",
      "size": "blockCount",
      "type": "int",
    },
    {
      "comment": "0-based start position of each exon",
      "name": "chromStarts",
      "size": "blockCount",
      "type": "int",
    },
    {
      "comment": "Mouseover label",
      "name": "_mouseOver",
      "type": "string",
    },
    {
      "comment": "pLI value for filters",
      "name": "_pli",
      "type": "float",
    },
    {
      "comment": "Gene symbol",
      "name": "geneName",
      "type": "string",
    },
    {
      "comment": "Synonymous metrics",
      "name": "synonymous",
      "type": "string",
    },
    {
      "comment": "Missense metrics",
      "name": "missense",
      "type": "string",
    },
    {
      "comment": "Predicted Loss of Function metrics",
      "name": "pLoF",
      "type": "string",
    },
  ],
  "name": "pliMetrics",
  "type": "table",
}
`;

exports[`autoSql parser > real world 1`] = `
{
  "comment": "UCSC Genes for chr7 with color plus GeneSymbol and SwissProtID",
  "fields": [
    {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    {
      "comment": "Start position of feature on chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    {
      "comment": "End position of feature on chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    {
      "comment": "Name of gene",
      "name": "name",
      "type": "string",
    },
    {
      "comment": "Score",
      "name": "score",
      "type": "uint",
    },
    {
      "comment": "+ or - for strand",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    {
      "comment": "Coding region start",
      "name": "thickStart",
      "type": "uint",
    },
    {
      "comment": "Coding region end",
      "name": "thickEnd",
      "type": "uint",
    },
    {
      "comment": "Green on + strand, Red on - strand",
      "name": "reserved",
      "type": "uint",
    },
    {
      "comment": "Gene Symbol",
      "name": "geneSymbol",
      "type": "string",
    },
    {
      "comment": "SWISS-PROT protein Accession number",
      "name": "spID",
      "type": "string",
    },
  ],
  "name": "hg18KGchr7",
  "type": "table",
}
`;

exports[`autoSql parser > resolves multiple values 1`] = `
{
  "comment": "A three dimensional point",
  "fields": [
    {
      "comment": "Horizontal coordinate",
      "name": "x",
      "type": "float",
    },
    {
      "comment": "Vertical coordinate",
      "name": "y",
      "type": "float",
    },
    {
      "comment": "In/out of screen coordinate",
      "name": "z",
      "type": "float",
    },
  ],
  "name": "point",
  "type": "simple",
}
`;

exports[`autoSql parser > resolves multiple values 2`] = `
{
  "comment": "A red/green/blue format color",
  "fields": [
    {
      "comment": "Red value 0-255",
      "name": "red",
      "type": "ubyte",
    },
    {
      "comment": "Green value 0-255",
      "name": "green",
      "type": "ubyte",
    },
    {
      "comment": "Blue value 0-255",
      "name": "blue",
      "type": "ubyte",
    },
  ],
  "name": "color",
  "type": "simple",
}
`;

exports[`autoSql parser > resolves multiple values 3`] = `
{
  "comment": "A face of a three dimensional solid",
  "fields": [
    {
      "comment": "Color of this face",
      "name": "color",
      "type": "simple color",
    },
    {
      "comment": "Number of points in this polygon",
      "name": "pointCount",
      "type": "int",
    },
    {
      "comment": "Indices of points that make up face in polyhedron point array",
      "name": "points",
      "size": "pointCount",
      "type": "uint",
    },
  ],
  "name": "face",
  "type": "object",
}
`;

exports[`autoSql parser > resolves multiple values 4`] = `
{
  "comment": "A solid three dimensional object",
  "fields": [
    {
      "comment": "Number of faces",
      "name": "faceCount",
      "type": "int",
    },
    {
      "comment": "List of faces",
      "name": "faces",
      "size": "faceCount",
      "type": "object face",
    },
    {
      "comment": "Number of points",
      "name": "pointCount",
      "type": "int",
    },
    {
      "comment": "Array of points",
      "name": "points",
      "size": "pointCount",
      "type": "simple point",
    },
  ],
  "name": "polyhedron",
  "type": "table",
}
`;

exports[`autoSql parser > resolves symbolic 1`] = `
{
  "comment": "example of enum and set symbolic columns",
  "fields": [
    {
      "comment": "unique id",
      "name": "id",
      "type": "int",
    },
    {
      "comment": "enumerated column",
      "name": "sex",
      "type": "enum",
      "vals": [
        "male",
        "female",
      ],
    },
    {
      "comment": "set column",
      "name": "skills",
      "type": "set",
      "vals": [
        "cProg",
        "javaProg",
        "pythonProg",
        "awkProg",
      ],
    },
  ],
  "name": "symbolCols",
  "type": "table",
}
`;

exports[`autoSql parser > simple example 1`] = `
{
  "comment": "A simple address book",
  "fields": [
    {
      "comment": "Name - first or last or both, we don't care",
      "name": "name",
      "type": "string",
    },
    {
      "comment": "Street address",
      "name": "address",
      "type": "lstring",
    },
    {
      "comment": "City",
      "name": "city",
      "type": "string",
    },
    {
      "comment": "A zip code is always positive, so can be unsigned",
      "name": "zipCode",
      "type": "uint",
    },
    {
      "comment": "Just store the abbreviation for the state",
      "name": "state",
      "size": 2,
      "type": "char",
    },
  ],
  "name": "addressBook",
  "type": "table",
}
`;
