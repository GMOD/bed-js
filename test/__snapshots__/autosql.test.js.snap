// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`autoSql parser premade autosql for file types 1`] = `
Object {
  "comment": "bigGenePred gene models",
  "fields": Array [
    Object {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    Object {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    Object {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    Object {
      "comment": "Name or ID of item, ideally both human readable and unique",
      "name": "name",
      "type": "string",
    },
    Object {
      "comment": "Score (0-1000)",
      "name": "score",
      "type": "uint",
    },
    Object {
      "comment": "+ or - for strand",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    Object {
      "comment": "Start of where display should be thick (start codon)",
      "name": "thickStart",
      "type": "uint",
    },
    Object {
      "comment": "End of where display should be thick (stop codon)",
      "name": "thickEnd",
      "type": "uint",
    },
    Object {
      "comment": "RGB value (use R,G,B string in input file)",
      "name": "reserved",
      "type": "uint",
    },
    Object {
      "comment": "Number of blocks",
      "name": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Comma separated list of block sizes",
      "name": "blockSizes",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Start positions relative to chromStart",
      "name": "chromStarts",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Alternative/human readable name",
      "name": "name2",
      "type": "string",
    },
    Object {
      "comment": "Status of CDS start annotation (none, unknown, incomplete, or complete)",
      "name": "cdsStartStat",
      "type": "string",
    },
    Object {
      "comment": "Status of CDS end annotation (none, unknown, incomplete, or complete)",
      "name": "cdsEndStat",
      "type": "string",
    },
    Object {
      "comment": "Exon frame {0,1,2}, or -1 if no frame for exon",
      "name": "exonFrames",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Transcript type",
      "name": "type",
      "type": "string",
    },
    Object {
      "comment": "Primary identifier for gene",
      "name": "geneName",
      "type": "string",
    },
    Object {
      "comment": "Alternative/human readable gene name",
      "name": "geneName2",
      "type": "string",
    },
    Object {
      "comment": "Gene type",
      "name": "geneType",
      "type": "string",
    },
  ],
  "name": "bigGenePred",
  "type": "table",
}
`;

exports[`autoSql parser premade autosql for file types 2`] = `
Object {
  "comment": "bigPsl pairwise alignment",
  "fields": Array [
    Object {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    Object {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    Object {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    Object {
      "comment": "Name or ID of item, ideally both human readable and unique",
      "name": "name",
      "type": "string",
    },
    Object {
      "comment": "Score (0-1000)",
      "name": "score",
      "type": "uint",
    },
    Object {
      "comment": "+ or - indicates whether the query aligns to the + or - strand on the reference",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    Object {
      "comment": "Start of where display should be thick (start codon)",
      "name": "thickStart",
      "type": "uint",
    },
    Object {
      "comment": "End of where display should be thick (stop codon)",
      "name": "thickEnd",
      "type": "uint",
    },
    Object {
      "comment": "RGB value (use R,G,B string in input file)",
      "name": "reserved",
      "type": "uint",
    },
    Object {
      "comment": "Number of blocks",
      "name": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Comma separated list of block sizes",
      "name": "blockSizes",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Start positions relative to chromStart",
      "name": "chromStarts",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Start position in other chromosome",
      "name": "oChromStart",
      "type": "uint",
    },
    Object {
      "comment": "End position in other chromosome",
      "name": "oChromEnd",
      "type": "uint",
    },
    Object {
      "comment": "+ or -, - means that psl was reversed into BED-compatible coordinates",
      "name": "oStrand",
      "size": 1,
      "type": "char",
    },
    Object {
      "comment": "Size of other chromosome.",
      "name": "oChromSize",
      "type": "uint",
    },
    Object {
      "comment": "Start positions relative to oChromStart or from oChromStart+oChromSize depending on strand",
      "name": "oChromStarts",
      "size": "blockCount",
      "type": "int",
    },
    Object {
      "comment": "Sequence on other chrom (or empty)",
      "name": "oSequence",
      "type": "lstring",
    },
    Object {
      "comment": "CDS in NCBI format",
      "name": "oCDS",
      "type": "string",
    },
    Object {
      "comment": "Size of target chromosome",
      "name": "chromSize",
      "type": "uint",
    },
    Object {
      "comment": "Number of bases matched.",
      "name": "match",
      "type": "uint",
    },
    Object {
      "comment": " Number of bases that don't match ",
      "name": "misMatch",
      "type": "uint",
    },
    Object {
      "comment": " Number of bases that match but are part of repeats ",
      "name": "repMatch",
      "type": "uint",
    },
    Object {
      "comment": " Number of 'N' bases ",
      "name": "nCount",
      "type": "uint",
    },
    Object {
      "comment": "0=empty, 1=nucleotide, 2=amino_acid",
      "name": "seqType",
      "type": "uint",
    },
  ],
  "name": "bigPsl",
  "type": "table",
}
`;

exports[`autoSql parser premade autosql for file types 3`] = `
Object {
  "comment": "Bed3 with MAF block",
  "fields": Array [
    Object {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    Object {
      "comment": "Start position in chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    Object {
      "comment": "End position in chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    Object {
      "comment": "MAF block",
      "name": "mafBlock",
      "type": "lstring",
    },
  ],
  "name": "bedMaf",
  "type": "table",
}
`;

exports[`autoSql parser resolves multiple values 1`] = `
Object {
  "comment": "A three dimensional point",
  "fields": Array [
    Object {
      "comment": "Horizontal coordinate",
      "name": "x",
      "type": "float",
    },
    Object {
      "comment": "Vertical coordinate",
      "name": "y",
      "type": "float",
    },
    Object {
      "comment": "In/out of screen coordinate",
      "name": "z",
      "type": "float",
    },
  ],
  "name": "point",
  "type": "simple",
}
`;

exports[`autoSql parser resolves multiple values 2`] = `
Object {
  "comment": "A red/green/blue format color",
  "fields": Array [
    Object {
      "comment": "Red value 0-255",
      "name": "red",
      "type": "ubyte",
    },
    Object {
      "comment": "Green value 0-255",
      "name": "green",
      "type": "ubyte",
    },
    Object {
      "comment": "Blue value 0-255",
      "name": "blue",
      "type": "ubyte",
    },
  ],
  "name": "color",
  "type": "simple",
}
`;

exports[`autoSql parser resolves multiple values 3`] = `
Object {
  "comment": "A face of a three dimensional solid",
  "fields": Array [
    Object {
      "comment": "Color of this face",
      "name": "color",
      "type": "simple color",
    },
    Object {
      "comment": "Number of points in this polygon",
      "name": "pointCount",
      "type": "int",
    },
    Object {
      "comment": "Indices of points that make up face in polyhedron point array",
      "name": "points",
      "size": "pointCount",
      "type": "uint",
    },
  ],
  "name": "face",
  "type": "object",
}
`;

exports[`autoSql parser resolves multiple values 4`] = `
Object {
  "comment": "A solid three dimensional object",
  "fields": Array [
    Object {
      "comment": "Number of faces",
      "name": "faceCount",
      "type": "int",
    },
    Object {
      "comment": "List of faces",
      "name": "faces",
      "size": "faceCount",
      "type": "object face",
    },
    Object {
      "comment": "Number of points",
      "name": "pointCount",
      "type": "int",
    },
    Object {
      "comment": "Array of points",
      "name": "points",
      "size": "pointCount",
      "type": "simple point",
    },
  ],
  "name": "polyhedron",
  "type": "table",
}
`;

exports[`autoSql parser resolves symbolic 1`] = `
Object {
  "comment": "example of enum and set symbolic columns",
  "fields": Array [
    Object {
      "comment": "unique id",
      "name": "id",
      "type": "int",
    },
    Object {
      "comment": "enumerated column",
      "name": "sex",
      "type": "enum",
      "vals": Array [
        "male",
        "female",
      ],
    },
    Object {
      "comment": "set column",
      "name": "skills",
      "type": "set",
      "vals": Array [
        "cProg",
        "javaProg",
        "pythonProg",
        "awkProg",
      ],
    },
  ],
  "name": "symbolCols",
  "type": "table",
}
`;

exports[`autoSql parser simple example 1`] = `
Object {
  "comment": "A simple address book",
  "fields": Array [
    Object {
      "comment": "Name - first or last or both, we don't care",
      "name": "name",
      "type": "string",
    },
    Object {
      "comment": "Street address",
      "name": "address",
      "type": "lstring",
    },
    Object {
      "comment": "City",
      "name": "city",
      "type": "string",
    },
    Object {
      "comment": "A zip code is always positive, so can be unsigned",
      "name": "zipCode",
      "type": "uint",
    },
    Object {
      "comment": "Just store the abbreviation for the state",
      "name": "state",
      "size": 2,
      "type": "char",
    },
  ],
  "name": "addressBook",
  "type": "table",
}
`;
