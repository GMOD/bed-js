// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`autoSql parser real world 1`] = `
Object {
  "comment": "UCSC Genes for chr7 with color plus GeneSymbol and SwissProtID",
  "fields": Array [
    Object {
      "comment": "Reference sequence chromosome or scaffold",
      "name": "chrom",
      "type": "string",
    },
    Object {
      "comment": "Start position of feature on chromosome",
      "name": "chromStart",
      "type": "uint",
    },
    Object {
      "comment": "End position of feature on chromosome",
      "name": "chromEnd",
      "type": "uint",
    },
    Object {
      "comment": "Name of gene",
      "name": "name",
      "type": "string",
    },
    Object {
      "comment": "Score",
      "name": "score",
      "type": "uint",
    },
    Object {
      "comment": "+ or - for strand",
      "name": "strand",
      "size": 1,
      "type": "char",
    },
    Object {
      "comment": "Coding region start",
      "name": "thickStart",
      "type": "uint",
    },
    Object {
      "comment": "Coding region end",
      "name": "thickEnd",
      "type": "uint",
    },
    Object {
      "comment": "Green on + strand, Red on - strand",
      "name": "reserved",
      "type": "uint",
    },
    Object {
      "comment": "Gene Symbol",
      "name": "geneSymbol",
      "type": "string",
    },
    Object {
      "comment": "SWISS-PROT protein Accession number",
      "name": "spID",
      "type": "string",
    },
  ],
  "name": "hg18KGchr7",
  "type": "table",
}
`;

exports[`autoSql parser resolves multiple values 1`] = `
Object {
  "comment": "A three dimensional point",
  "fields": Array [
    Object {
      "comment": "Horizontal coordinate",
      "name": "x",
      "type": "float",
    },
    Object {
      "comment": "Vertical coordinate",
      "name": "y",
      "type": "float",
    },
    Object {
      "comment": "In/out of screen coordinate",
      "name": "z",
      "type": "float",
    },
  ],
  "name": "point",
  "type": "simple",
}
`;

exports[`autoSql parser resolves multiple values 2`] = `
Object {
  "comment": "A red/green/blue format color",
  "fields": Array [
    Object {
      "comment": "Red value 0-255",
      "name": "red",
      "type": "ubyte",
    },
    Object {
      "comment": "Green value 0-255",
      "name": "green",
      "type": "ubyte",
    },
    Object {
      "comment": "Blue value 0-255",
      "name": "blue",
      "type": "ubyte",
    },
  ],
  "name": "color",
  "type": "simple",
}
`;

exports[`autoSql parser resolves multiple values 3`] = `
Object {
  "comment": "A face of a three dimensional solid",
  "fields": Array [
    Object {
      "comment": "Color of this face",
      "name": "color",
      "type": "simple color",
    },
    Object {
      "comment": "Number of points in this polygon",
      "name": "pointCount",
      "type": "int",
    },
    Object {
      "comment": "Indices of points that make up face in polyhedron point array",
      "name": "points",
      "size": "pointCount",
      "type": "uint",
    },
  ],
  "name": "face",
  "type": "object",
}
`;

exports[`autoSql parser resolves multiple values 4`] = `
Object {
  "comment": "A solid three dimensional object",
  "fields": Array [
    Object {
      "comment": "Number of faces",
      "name": "faceCount",
      "type": "int",
    },
    Object {
      "comment": "List of faces",
      "name": "faces",
      "size": "faceCount",
      "type": "object face",
    },
    Object {
      "comment": "Number of points",
      "name": "pointCount",
      "type": "int",
    },
    Object {
      "comment": "Array of points",
      "name": "points",
      "size": "pointCount",
      "type": "simple point",
    },
  ],
  "name": "polyhedron",
  "type": "table",
}
`;

exports[`autoSql parser resolves symbolic 1`] = `
Object {
  "comment": "example of enum and set symbolic columns",
  "fields": Array [
    Object {
      "comment": "unique id",
      "name": "id",
      "type": "int",
    },
    Object {
      "comment": "enumerated column",
      "name": "sex",
      "type": "enum",
      "vals": Array [
        "male",
        "female",
      ],
    },
    Object {
      "comment": "set column",
      "name": "skills",
      "type": "set",
      "vals": Array [
        "cProg",
        "javaProg",
        "pythonProg",
        "awkProg",
      ],
    },
  ],
  "name": "symbolCols",
  "type": "table",
}
`;

exports[`autoSql parser simple example 1`] = `
Object {
  "comment": "A simple address book",
  "fields": Array [
    Object {
      "comment": "Name - first or last or both, we don't care",
      "name": "name",
      "type": "string",
    },
    Object {
      "comment": "Street address",
      "name": "address",
      "type": "lstring",
    },
    Object {
      "comment": "City",
      "name": "city",
      "type": "string",
    },
    Object {
      "comment": "A zip code is always positive, so can be unsigned",
      "name": "zipCode",
      "type": "uint",
    },
    Object {
      "comment": "Just store the abbreviation for the state",
      "name": "state",
      "size": 2,
      "type": "char",
    },
  ],
  "name": "addressBook",
  "type": "table",
}
`;
